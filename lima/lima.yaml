# This template requires Lima v0.7.0 or later
images:
# Try to use release-yyyyMMdd image if available. Note that release-yyyyMMdd will be removed after several months.
- location: "https://cloud.debian.org/images/cloud/bookworm/20250210-2019/debian-12-genericcloud-amd64-20250210-2019.qcow2"
  arch: "x86_64"
  digest: "sha512:a58d86525d75fd8e139a2302531ce5d2ab75ef0273cfe78f9d53aada4b23efd45f8433b4806fa4570cfe981c8fae26f5e5e855cbd66ba2198862f28125fd2d45"
- location: "https://cloud.debian.org/images/cloud/bookworm/20250210-2019/debian-12-genericcloud-arm64-20250210-2019.qcow2"
  arch: "aarch64"
  digest: "sha512:a17a462acbc3412ef195390fb60dffba2134fef1a276d500ca50a06036c488035657409fcd02f2f70d1e7a91776ca4249cfbceabeb90e74cb123b9971381c72a"
# Fallback to the latest release image.
# Hint: run `limactl prune` to invalidate the cache
- location: "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2"
  arch: "x86_64"
- location: "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-arm64.qcow2"
  arch: "aarch64"
mountTypesUnsupported: ["9p"]

cpus: 10
memory: 16GiB

mounts:
- location: "~"
  writable: true
- location: "/tmp/lima"
  writable: true

mountType: virtiofs

# In the guest run `cat /var/log/cloud-init-output.log` to see the logs.
provision:
# essential dependencies
- mode: system
  script: |
    #!/bin/bash
    set -euxo pipefail
    export DEBIAN_FRONTEND=noninteractive
    if ! type git > /dev/null; then
      apt upgrade -y && apt-get install -y git unzip make cmake codespell gcc zsh tmux
    fi
    chsh -s $(which zsh)
# my dotfiles setup for zsh and tmux
- mode: user
  script: |
    #!/bin/bash
    set -euxo pipefail
    export DEBIAN_FRONTEND=noninteractive
    if [[ ! -d ~/.dotfiles ]]; then
      echo "installing dotfiles"
      cd ~
      git clone https://github.com/mauriciopoppe/dotfiles .dotfiles
      cd .dotfiles
      source install.sh
      dotfiles -y zsh
      dotfiles -y tmux
      sudo apt-get install -y fzf
    fi
# neovim
- mode: user
  script: |
    #!/bin/bash
    set -euxo pipefail
    export DEBIAN_FRONTEND=noninteractive
    mkdir -p ~/go/src/github.com/neovim
    if ! type nvim > /dev/null; then
      echo "installing neovim"
      sudo apt-get install ninja-build gettext cmake curl build-essential -y
      git clone https://github.com/neovim/neovim ~/go/src/github.com/neovim/neovim
      cd ~/go/src/github.com/neovim/neovim
      git checkout v0.10.4
      make CMAKE_BUILD_TYPE=Release
      sudo make install
    fi
# kernel build dependencies.
- mode: user
  script: |
    #!/bin/bash
    set -euxo pipefail
    sudo apt install bc make gcc flex bison libncurses-dev libelf-dev libssl-dev -y

