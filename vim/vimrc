" Awesome .vimrc files from
"
"     yadr - https://github.com/skwp/dotfiles/blob/master/vimrc
"     amix/vimrc - https://github.com/amix/vimrc
"     Terry Ma - https://github.com/terryma/dotfiles/blob/master/.vimrc

set nocompatible

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'sheerun/vim-polyglot'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'easymotion/vim-easymotion'
Plug 'kien/ctrlp.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'terryma/vim-expand-region'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'

" Syntax specific
" Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'md'] }

" Themes
" Plug 'flazz/vim-colorschemes'
Plug 'kristijanhusak/vim-hybrid-material'
" note to self: generates a bar for tmux similar to the current one
" on vim, see the repo to generate a theme
" Plug 'edkolev/tmuxline.vim'

" Plug 'Valloric/YouCompleteMe', { 'for': 'cpp', 'do': './install.py' }

" snippets
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

call plug#end()

"  ##### Editor configurations #####
" mouse support (scroll :D)
set mouse=a

" one more space at the end of line
set virtualedit=onemore

" line numbering
set number

" splits are below and right
set splitbelow
set splitright

" 256 bit terminal
set t_Co=256

" lines of history vim has to remember
set history=10000

" when a file is changed from the outside (sort of)
set autoread

" display invisible characters
set list
set listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣
set showbreak=↪

" Minimal number of screen lines to keep above and below the cursor
set scrolloff=5

" no need to show --INSERT--
set noshowmode

" close buffer without saving it
set hidden

" Set backspace config
set backspace=eol,start,indent

" Case insensitive search
set ignorecase
set smartcase
set incsearch

" don't show matching bracket (performance)
set noshowmatch

" show incomplete commands
set showcmd

" always show the status line
set laststatus=2

" assume utf-8
set encoding=utf-8

" column width indicator
set colorcolumn=+1

" turn backup off
set noswapfile
set nobackup
set nowritebackup

" spaces instead of tabs
set expandtab

" be smart when using tabs
set smarttab

" tab space set equal to 2 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2

" display settings
set linebreak
set textwidth=80
set autoindent
set nowrap
set whichwrap+=h,l,<,>,[,]

" persistent undo
set undodir=~/.vim/backups
set undofile

set background=dark

" buffer screen updates instead of a continuous update (performance improvement
" while scrolling)
set lazyredraw

" disable matching paren it for now, it's making vim slow
let loaded_matchparen = 1

" removes trailing whitespace on save
" http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" autosave
" http://blog.unixphilosopher.com/2015/02/a-more-betterer-autosave-in-vim.html
function! <SID>autosave()
  let name = expand('%')
  if name != '' && name != '[Command Line]'
    update
  endif
endfunction
autocmd InsertLeave,TextChanged * :call <SID>autosave()

" set syntax highlighting for specific file types
autocmd BufRead,BufNewFile *.md set filetype=markdown
" Enable spellchecking for Markdown
autocmd FileType markdown setlocal spell

" ##### command-line mappings ##### "
" Ctrl-Space: Show history
cnoremap <c-@> <c-f>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-f> <left>
cnoremap <c-g> <right>

" ##### custom mappings #####
" space is my leader "
let mapleader = "\<Space>"

" ## normal mode ##
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Y: yank til $
nnoremap Y y$

" Q: closes the window
nnoremap Q :q<cr>

" U: Redos since 'u' undos
nnoremap U :redo<cr>

" edit last selection gv
" visually select the text that was recently edited/pasted
nmap gV `[v`]

" # control mappings (in normal mode)
" remapping control + movement to move between split panes
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
nnoremap <c-l> <c-w><c-l>
nnoremap <c-h> <c-w><c-h>

" # leader mappings (in normal mode)
" from: https://joshldavis.com/2015/04/05/vim-tab-madness-buffers-vs-tabs/
nmap <leader>T :enew<cr>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<cr>
" Show all open buffers and their status
nmap <leader>bl :ls<cr>

" window resizing
nmap <leader><Up> :resize +5<cr>
nmap <leader><Down> :resize -5<cr>
nmap <leader><Left> :vertical resize -5<cr>
nmap <leader><Right> :vertical resize +5<cr>

" easymotion 2-word search
nmap <leader>s <Plug>(easymotion-s2)

" Yank text to the OS X clipboard
noremap <leader>y "*y
" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<cr>:put  *<cr>:set nopaste<cr>

" space + \ = create a new vertical pane (the | key is over \)
" space + - = create a new horizontal pane
nnoremap <leader>\ <c-w>v<c-w>l
nnoremap <leader>- <c-w>s

" # meta mappings (in normal mode) (mauricio)
" source http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
" ˙ = alt + h
nnoremap ˙ :bprevious<CR>
" ¬ = alt + l
nnoremap ¬ :bnext<CR>

" ## insert mode ##
" remap jk and kj to exit insert mode
inoremap jk <esc>
inoremap kj <esc>
" move word back
inoremap <c-b> <c-o>b
" move word forward
inoremap <c-w> <c-o>w
" move to the beginning of the line
imap <c-i> <esc>I
" move to the end of the line
imap <c-a> <esc>A

" ## visual mode ##
" Move visual block (source http://vimrcfu.com/snippet/77)
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv

" keep the selection after indenting (source http://vimrcfu.com/snippet/14)
vnoremap > >gv
vnoremap <LT> <LT>gv

" terryma/vim-expand-region override
vmap v <Plug>(expand_region_expand)
vmap <c-v> <Plug>(expand_region_shrink)

" ##### plugins configuration ######
" kien/ctrlp.vim
" taken from https://github.com/thoughtbot/dotfiles/blob/master/vimrc
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .DS_Store
        \ -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['standard']

" bling/vim-airline
let g:airline_powerline_fonts = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_theme='bubblegum'

" xolox/vim-session
let g:session_autosave = 'yes'

" airblade/vim-gitgutter
let g:gitgutter_map_keys = 0

" plasticboy/vim-markdown
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_folding_disabled = 1

" UltiSnips
let g:UltiSnipsExpandTrigger='<c-e>'
let g:UltiSnipsJumpForwardTrigger='<c-b>'
let g:UltiSnipsJumpBackwardTrigger='<c-z>'

" themes
let g:enable_bold_font=1
syntax enable
colorscheme hybrid_reverse

