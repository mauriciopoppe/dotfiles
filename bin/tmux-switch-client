#!/usr/bin/env ruby
#
# NOTE: requires the installation of the binary `showmarks`, it should be under
# zsh/plugins

require 'pathname'

# Algorithm:
# - get saved sessions (from the file ~/bookmarks.data)
# - get opened sessions (with tmux-list-session)
# - create a list with unique items from both lists (sorted)
# - ask to switch session
# - switch session

# NOTE: the . character is replaced by @+ because tmuxinator uses
# . internally
FROM = '.'
TO = '@+'

def escape(v)
  v.gsub(FROM, TO)
end

def format_session(name, opened = false)
  # print a warning if the session contains a dot
  name = escape(name)
  # STDERR.puts "#{name} contains the character ." if name.index(".") != nil

  format('%3s | %s', opened ? '*' : ' ', name)
end

def find_closest_tmuxinator_file(path)
  pn = Pathname.new(path)
  until pn.root?
    return pn if File.exist?(pn + '.tmuxinator.yml')
    pn = pn.parent
  end
end

all_bookmarks = `showmarks`.strip.split("\n").sort!
opened_tmux_sessions =
  `tmux list-sessions -F "\#{session_name}"`.strip.split("\n").sort!

# push opened sessions as: [name] *
unique = []
opened_tmux_sessions.each do |item|
  unique << "#{format_session(item, true)}"
end

# push remaning sessions
all_bookmarks.each do |bookmark|
  expanded = escape(`echo #{bookmark}`.strip)
  # puts expanded
  if opened_tmux_sessions.index(expanded).nil?
    unique << "#{format_session(expanded, false)}"
  end
end

chosen = `echo "#{unique.join("\n")}" | fzf-tmux -d 15 --preview 'echo {}' --preview-window down:1`

exit 0 if chosen.length <= 0

# change session
c_opened, c_name = chosen.split(' | ').map(&:strip)
if c_opened.length > 0
  `tmux switch-client -t "#{c_name}"`
else
  # replace special escape with .
  c_name_formatted = c_name.gsub(TO, FROM)

  # find closest .tmuxinator.yml file and symlink it if needed
  closest_dir = find_closest_tmuxinator_file(c_name_formatted)
  needs_symlink = !(closest_dir.to_s.eql? c_name_formatted)

  system("ls #{c_name_formatted} > /dev/null") ||
    fail("bookmark #{c_name_formatted} doesn't exist")

  # create symlink to parent dir
  if needs_symlink
    `cd #{c_name_formatted} && ln -s #{File.join(closest_dir, '.tmuxinator.yml')} .tmuxinator.yml`
  end

  system("ls #{c_name_formatted}/.tmuxinator.* > /dev/null 2>&1") ||
    fail("#{c_name_formatted} doesn't contain a .tmuxinator file")

  `cd #{c_name_formatted} && tmuxinator start .`

  if needs_symlink
    `cd #{c_name_formatted} && trash .tmuxinator.yml`
  end
end

# vim: set ft=ruby
